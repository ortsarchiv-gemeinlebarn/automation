name: OAG CI & CD Workflows - Test & Production Environment

on:
  workflow_call:
    # secrets:
    #   FTP_DEPLOY_HOSTNAME_TEST:
    #     required: true
    #     description: FTP Hostname for Deployment in Test
    #   FTP_DEPLOY_USERNAME_TEST:
    #     required: true
    #     description: FTP Username for Deployment in Test
    #   FTP_DEPLOY_PASSWORD_TEST:
    #     required: true
    #     description: FTP Password for Deployment in Test
    #   FTP_DEPLOY_HOSTNAME_PRODUCTION:
    #     required: true
    #     description: FTP Hostname for Deployment in Production
    #   FTP_DEPLOY_USERNAME_PRODUCTION:
    #     required: true
    #     description: FTP Username for Deployment in Production
    #   FTP_DEPLOY_PASSWORD_PRODUCTION:
    #     required: true
    #     description: FTP Password for Deployment in Production

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      deployTest: ${{ steps.setup.outputs.DEPLOY_TEST }}
      deployProduction: ${{ steps.setup.outputs.DEPLOY_PRODUCTION }}
    steps:
      - id: setup
        name: Evaluate Deployment Strategy
        run: |
          echo "DEPLOY_TEST=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/bugfix/') }}" >> "$GITHUB_OUTPUT"
          echo "DEPLOY_PRODUCTION=${{ (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) || github.ref == 'refs/heads/main' }}" >> "$GITHUB_OUTPUT"

      - name: Summary
        shell: pwsh
        run: |
          $test = ${{ steps.setup.outputs.DEPLOY_TEST }} -eq 'true' ? 'Ja' : 'Nein';
          $production = ${{ steps.setup.outputs.DEPLOY_PRODUCTION }} -eq 'true' ? 'Ja' : 'Nein';

          Write-Host "### Result" >> $GITHUB_STEP_SUMMARY
          Write-Host "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          Write-Host "**Test:** $test" >> $GITHUB_STEP_SUMMARY
          Write-Host "**Production:** $production" >> $GITHUB_STEP_SUMMARY
          

  # Test Environment

  build-test:
    name: "[Test] Build"
    runs-on: windows-latest
    needs: prepare
    if: ${{ needs.prepare.outputs.deployTest == 'true' }}
    steps:
      - name: Do something
        run: echo 'Build Test'

  deploy-test:
    name: "[Test] Deploy"
    needs: build-test
    runs-on: ubuntu-latest
    environment: Test
    steps:
      - name: Do something
        run: echo 'Deploy Test'
  
  # Production Environment

  build-production:
    name: "[Production] Build"
    runs-on: windows-latest
    needs: prepare
    if: ${{ needs.prepare.outputs.deployProduction == 'true' }}
    steps:
      - name: Do something
        run: echo 'Build Production'

  deploy-production:
    name: "[Production] Deploy"
    needs: build-production
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Do something
        run: echo 'Deploy Production'
